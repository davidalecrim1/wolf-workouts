// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: api/protobuf/trainer.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrainerService_ScheduleTraining_FullMethodName = "/trainer.TrainerService/ScheduleTraining"
	TrainerService_HealthCheck_FullMethodName      = "/trainer.TrainerService/HealthCheck"
)

// TrainerServiceClient is the client API for TrainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerServiceClient interface {
	ScheduleTraining(ctx context.Context, in *ScheduleHourRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type trainerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerServiceClient(cc grpc.ClientConnInterface) TrainerServiceClient {
	return &trainerServiceClient{cc}
}

func (c *trainerServiceClient) ScheduleTraining(ctx context.Context, in *ScheduleHourRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TrainerService_ScheduleTraining_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, TrainerService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerServiceServer is the server API for TrainerService service.
// All implementations must embed UnimplementedTrainerServiceServer
// for forward compatibility
type TrainerServiceServer interface {
	ScheduleTraining(context.Context, *ScheduleHourRequest) (*emptypb.Empty, error)
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedTrainerServiceServer()
}

// UnimplementedTrainerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainerServiceServer struct {
}

func (UnimplementedTrainerServiceServer) ScheduleTraining(context.Context, *ScheduleHourRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleTraining not implemented")
}
func (UnimplementedTrainerServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTrainerServiceServer) mustEmbedUnimplementedTrainerServiceServer() {}

// UnsafeTrainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerServiceServer will
// result in compilation errors.
type UnsafeTrainerServiceServer interface {
	mustEmbedUnimplementedTrainerServiceServer()
}

func RegisterTrainerServiceServer(s grpc.ServiceRegistrar, srv TrainerServiceServer) {
	s.RegisterService(&TrainerService_ServiceDesc, srv)
}

func _TrainerService_ScheduleTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).ScheduleTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainerService_ScheduleTraining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).ScheduleTraining(ctx, req.(*ScheduleHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainerService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainerService_ServiceDesc is the grpc.ServiceDesc for TrainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainer.TrainerService",
	HandlerType: (*TrainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleTraining",
			Handler:    _TrainerService_ScheduleTraining_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _TrainerService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf/trainer.proto",
}
